{"version":3,"file":"static/js/424.dc6bef84.chunk.js","mappings":"gMAEaA,E,QAAcC,EAAAA,IAAH,qE,SCCXC,EAAS,kBAClB,SAACF,EAAD,WACI,SAAC,KAAD,CAAcG,MAAO,IAAKC,OAAQ,IAAKC,MAAM,gB,2ICHxCC,E,QAAaL,EAAAA,GAAH,oT,SCEhB,SAASM,EAAT,GAAyB,IAATC,EAAQ,EAARA,KAGnB,OACI,+BACI,SAACF,EAAD,UACKE,EAAKC,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAOC,EAAd,EAAcA,KAAd,OACN,wBACKD,GACM,4BACC,gBACAE,IAAG,0CAAqCF,GACpCG,IAAKF,KACT,uBAAIA,QAIL,4BACC,gBAAKC,IAAKE,EAAaZ,MAAO,IAAKC,OAAQ,IAAKU,IAAKF,KACrD,uBAAIA,QAZPF,UCLd,SAASM,IACtB,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,MAAjC,eAAOX,EAAP,KAAaY,EAAb,KAiBA,OAfAC,EAAAA,EAAAA,YAAU,WACRC,EAAAA,EAAoBL,GAASM,MAAK,SAAAC,GAChC,IAAMC,EAAS,GACfD,EAAKhB,KAAKC,KAAI,YAA0C,IAChDiB,EAAQ,CACZhB,GAFmD,EAAtCA,GAGbE,KAHmD,EAAlCe,cAIjBhB,MAJmD,EAAnBiB,cAMlC,OAAOH,EAAOI,KAAKH,MAErBN,EAAQK,QAET,CAACR,KAGF,iCACIT,IAAQ,SAACN,EAAA,EAAD,IAETM,GAAQA,EAAKsB,OAAS,GACrB,SAACvB,EAAD,CAAMC,KAAMA,KAEZ,uE,gOC9BRuB,IAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAU,mCAEHC,EAAS,SAAAT,GAClB,OAAOA,EAAKf,KACR,kBAAwD,CACpDC,GADJ,EAAGA,GAECwB,YAFJ,EAAOA,YAGHC,eAHJ,EAAoBA,eAIhBC,aAJJ,EAAoCA,kBAQrC,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,oGACoBN,IAAAA,IAAA,sCAAyCC,EAAzC,SAAyD,IAD7E,cACGM,EADH,yBAEIA,EAASd,MAFb,kEAKA,SAAee,EAAtB,+CAAO,OAAP,oBAAO,WAA2BC,GAA3B,uFACoBT,IAAAA,IAAA,gCAAmCC,EAAnC,kBAAoDQ,EAApD,YADpB,cACGF,EADH,yBAEIA,EAASd,MAFb,kEAMA,SAAeiB,EAAtB,+CAAO,OAAP,oBAAO,WAA4BxB,GAA5B,uFACgBc,IAAAA,IAAA,iBAAoBd,EAApB,oBAAuCe,EAAvC,sCADhB,cACDM,EADC,yBAEIA,EAASd,MAFb,kEAKA,SAAekB,EAAtB,+CAAO,OAAP,oBAAO,WAAyBzB,GAAzB,uFACgBc,IAAAA,IAAA,iBAAoBd,EAApB,4BAA+Ce,IAD/D,cACDM,EADC,yBAEIA,EAASd,MAFb,kEAKA,SAAemB,EAAtB,+CAAO,OAAP,oBAAO,WAA4B1B,GAA5B,uFACgBc,IAAAA,IAAA,iBAAoBd,EAApB,4BAA+Ce,IAD/D,cACDM,EADC,yBAEIA,EAASd,MAFb,oE","sources":["components/Loader/Loader.styled.js","components/Loader/Loader.jsx","components/Cast/Cast.styled.js","components/Cast/Cast.jsx","pages/CastPage.js","services/api.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const LoaderBlock = styled.div`\n  margin-left: auto;\n  margin-right: auto;\n`;\n","import { FallingLines } from 'react-loader-spinner';\nimport {LoaderBlock} from 'components/Loader/Loader.styled'\n\nexport const Loader = () => (\n    <LoaderBlock>\n        <FallingLines width={110} height={110} color=\"#c8553d\" />\n    </LoaderBlock>\n    \n);","import styled from '@emotion/styled';\n\nexport const ListStyled = styled.ul`\n  display: grid;\n  max-width: calc(100vw - 48px);\n  grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));\n  grid-gap: 16px;\n  margin-top: 0;\n  margin-bottom: 0;\n  padding: 0;\n  list-style: none;\n  margin-left: auto;\n  margin-right: auto;\n  padding: 50px 80px 90px;\n`;\n","import notFoundImg from 'images/notFound.jpg';\nimport propTypes from 'prop-types';\nimport { ListStyled } from 'components/Cast/Cast.styled';\n\nexport function Cast({ cast }) {\n        \n\n    return (\n        <>\n            <ListStyled>\n                {cast.map(({ id, image, name }) => (\n                    <li key={id}>\n                        {image\n                            ? (<div>\n                                <img\n                                src={`https://image.tmdb.org/t/p/w300/${image}`}\n                                    alt={name} />\n                                <p>{name}</p>\n                            </div>\n                                \n                            )\n                            : (<div>\n                                <img src={notFoundImg} width={300} height={450} alt={name} />\n                                <p>{name}</p>\n                            </div>\n                                )}\n                    </li>\n                ))}\n        </ListStyled>\n        </>\n)\n};\n\nCast.propTypes = {\n  cast: propTypes.arrayOf(\n    propTypes.shape({\n      id: propTypes.number,\n      name: propTypes.string,\n      image: propTypes.string,\n    })\n  ).isRequired,\n};","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport * as eventsApi from 'services/api';\nimport { Loader } from 'components/Loader/Loader';\nimport {Cast} from 'components/Cast/Cast.jsx';\n\nexport default function CastPage() {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState(null);\n\n  useEffect(() => {\n    eventsApi.fetchCast(movieId).then(data => {\n      const mapped = [];\n      data.cast.map(({ id, original_name, profile_path }) => {\n        const actor = {\n          id: id,\n          name: original_name,\n          image: profile_path,\n        };\n        return mapped.push(actor);\n      });\n      setCast(mapped);\n    });\n  }, [movieId]);\n\n  return (\n    <>\n      {!cast && <Loader />}\n\n      {cast && cast.length > 0 ? (\n        <Cast cast={cast} />\n      ) : (\n        <p>We don't have any casts for this movie</p>\n      )}\n    </>\n  );\n}\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = '0695a445b15baac58108e1a8456d49ee';\n\nexport const mapper = data => {\n    return data.map(\n        ({ id, poster_path, original_title, vote_average }) => ({\n            id,\n            poster_path,\n            original_title,\n            vote_average\n        }));\n};\n\nexport async function fetchTrending() {\n    const response = await axios.get(`/trending/movie/day?api_key=${API_KEY}&page=${1}`);\n    return response.data; \n};\n\nexport async function fetchSearch(searchQuery) {\n    const response = await axios.get(`/search/movie?api_key=${API_KEY}&query=${searchQuery}&page=1`);\n    return response.data; \n    \n};\n\nexport async function fetchDetails(movieId) {\nconst response = await axios.get(`/movie/${movieId}?api_key=${API_KEY}&append_to_response=videos,images`);\n    return response.data; \n};\n\nexport async function fetchCast(movieId) {\nconst response = await axios.get(`/movie/${movieId}/credits?api_key=${API_KEY}`);\n    return response.data;  \n};\n\nexport async function fetchReviews(movieId) {\nconst response = await axios.get(`/movie/${movieId}/reviews?api_key=${API_KEY}`);\n    return response.data; \n};\n\n// export async function fetchTrending() {\n//     const trendingURL = `${BASE_URL}/trending/movie/day?api_key=${API_KEY}&page=${1}`;\n//     return await axios.get(`${trendingURL}`).then(response => response.data);   \n// };\n\n// export async function fetchSearch(searchQuery) {\n//     const serchURL = `${BASE_URL}/search/movie?api_key=${API_KEY}&query=${searchQuery}&page=1`;\n//     return await axios.get(`${serchURL}`).then(response => response.data);   \n// };\n\n// export async function fetchDetails(movieId) {\n//     const detailsURL = `${BASE_URL}/movie/${movieId}?api_key=${API_KEY}&append_to_response=videos,images`;\n//     return await axios.get(`${detailsURL}`).then(response => response.data);  \n// };\n\n// export async function fetchCast(movieId) {\n//     const castURL = `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}`;\n//     return await axios.get(`${castURL}`).then(response => response.data);  \n// };\n\n// export async function fetchReviews(movieId) {\n//     const reviewsURL = `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}`;\n//     return await axios.get(`${reviewsURL}`).then(response => response.data);  \n// };"],"names":["LoaderBlock","styled","Loader","width","height","color","ListStyled","Cast","cast","map","id","image","name","src","alt","notFoundImg","CastPage","movieId","useParams","useState","setCast","useEffect","eventsApi","then","data","mapped","actor","original_name","profile_path","push","length","axios","API_KEY","mapper","poster_path","original_title","vote_average","fetchTrending","response","fetchSearch","searchQuery","fetchDetails","fetchCast","fetchReviews"],"sourceRoot":""}
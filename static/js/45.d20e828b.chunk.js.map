{"version":3,"file":"static/js/45.d20e828b.chunk.js","mappings":"qLAEaA,E,QAAmBC,EAAAA,GAAH,yR,8ECAhBC,E,QAAcD,EAAAA,IAAH,qE,SCCXE,EAAS,kBAClB,SAACD,EAAD,WACI,SAAC,KAAD,CAAcE,MAAO,IAAKC,OAAQ,IAAKC,MAAM,gB,kICHxCC,EAAaN,EAAAA,EAAAA,GAAH,+gBAiBVO,EAAcP,EAAAA,EAAAA,IAAH,gKAUXQ,EAAQR,EAAAA,EAAAA,IAAH,8H,iJCzBX,SAASS,EAAT,GAAgD,IAAtBC,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,OAAQC,EAAS,EAATA,MACnCC,GAAWC,EAAAA,EAAAA,MAEjB,OACI,SAAC,KAAD,WAEI,UAAC,KAAD,CAAMC,GAAE,iBAAYL,GACpBM,MAAO,CAACC,KAAMJ,EAASK,SAAWL,EAASM,QAD3C,WAEI,SAAC,KAAD,CAAaC,IAAKT,EAAM,0CAAsCA,GAAW,YAAaU,IAAKT,KAC3F,SAAC,KAAD,UAAQA,S,cCRjB,SAASU,EAAT,GAA+B,IAAVC,EAAS,EAATA,OACxB,OACI,SAAC,IAAD,UACKA,EAAOC,KAAI,SAAAC,GACR,OACI,SAAChB,EAAD,CAEIC,GAAIe,EAAMf,GACVC,OAAQc,EAAMC,YACdd,MAAOa,EAAME,gBAHRF,EAAMf,SCNpB,SAASkB,IACtB,OAA0CC,EAAAA,EAAAA,UAAS,MAAnD,eAAOC,EAAP,KAAsBC,EAAtB,KASA,OAPAC,EAAAA,EAAAA,YAAU,WACRC,EAAAA,KAA0BC,MAAK,SAAAJ,GAC7B,IAAMK,EAAsBF,EAAAA,GAAiBH,EAAcM,SAC3DL,EAAiBI,QAElB,KAGD,iCACE,4CACEL,IAAiB,SAAC5B,EAAA,EAAD,IAClB4B,IAAiB,SAACR,EAAD,CAAYC,OAAQO,S,gOCjB5CO,IAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAU,mCAEHC,EAAS,SAAAC,GAClB,OAAOA,EAAKhB,KACR,kBAAwD,CACpDd,GADJ,EAAGA,GAECgB,YAFJ,EAAOA,YAGHC,eAHJ,EAAoBA,eAIhBc,aAJJ,EAAoCA,kBAQrC,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,oGACoBL,IAAAA,IAAA,sCAAyCC,EAAzC,SAAyD,IAD7E,cACGK,EADH,yBAEIA,EAASH,MAFb,kEAKA,SAAeI,EAAtB,+CAAO,OAAP,oBAAO,WAA2BC,GAA3B,uFACoBR,IAAAA,IAAA,gCAAmCC,EAAnC,kBAAoDO,EAApD,YADpB,cACGF,EADH,yBAEIA,EAASH,MAFb,kEAMA,SAAeM,EAAtB,+CAAO,OAAP,oBAAO,WAA4BC,GAA5B,uFACgBV,IAAAA,IAAA,iBAAoBU,EAApB,oBAAuCT,EAAvC,sCADhB,cACDK,EADC,yBAEIA,EAASH,MAFb,kEAKA,SAAeQ,EAAtB,+CAAO,OAAP,oBAAO,WAAyBD,GAAzB,uFACgBV,IAAAA,IAAA,iBAAoBU,EAApB,4BAA+CT,IAD/D,cACDK,EADC,yBAEIA,EAASH,MAFb,kEAKA,SAAeS,EAAtB,+CAAO,OAAP,oBAAO,WAA4BF,GAA5B,uFACgBV,IAAAA,IAAA,iBAAoBU,EAApB,4BAA+CT,IAD/D,cACDK,EADC,yBAEIA,EAASH,MAFb","sources":["components/ImageGallery/ImageGallery.styled.js","components/Loader/Loader.styled.js","components/Loader/Loader.jsx","components/MoviesListItem/MoviesListItem.styled.js","components/MoviesListItem/MoviesListItem.jsx","components/MoviesList/MoviesList.jsx","pages/HomePage.js","services/api.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const ImageGalleryList = styled.ul`\n  display: grid;\n  max-width: calc(100vw - 48px);\n  grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));\n  grid-gap: 16px;\n  margin-top: 0;\n  margin-bottom: 0;\n  padding: 0;\n  list-style: none;\n  margin-left: auto;\n  margin-right: auto;\n`;\n","import styled from '@emotion/styled';\n\nexport const LoaderBlock = styled.div`\n  margin-left: auto;\n  margin-right: auto;\n`;\n","import { FallingLines } from 'react-loader-spinner';\nimport {LoaderBlock} from 'components/Loader/Loader.styled'\n\nexport const Loader = () => (\n    <LoaderBlock>\n        <FallingLines width={110} height={110} color=\"#c8553d\" />\n    </LoaderBlock>\n    \n);","import styled from '@emotion/styled';\n\nexport const ItemStyled = styled.li`\n  padding: 10px;\n  border-radius: 2px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2),\n    0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 2px 1px -1px rgba(0, 0, 0, 0.12);\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2),\n    0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 2px 1px -1px rgba(0, 0, 0, 0.12);\n  &:hover {\n    transform: scale(1.03);\n    cursor: zoom-in;\n  }\n`;\n\nexport const ImageStyled = styled.img`\n  width: 300px;\n  height: 440px;\n  margin-bottom: 10px;\n  object-fit: cover;\n  @media (min-width: 768px) {\n    width: 350px;\n  }\n`;\n\nexport const Title = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 10px;\n`;\n","import { Link, useLocation } from \"react-router-dom\";\nimport { ItemStyled, ImageStyled, Title } from 'components/MoviesListItem/MoviesListItem.styled';\nimport propTypes from 'prop-types';\n\nexport function MoviesListItem({ id, poster, title }) {\n    const location = useLocation();\n\n    return (\n        <ItemStyled>\n            \n            <Link to={`movies/${id}`}\n            state={{from: location.pathname + location.search}}>\n                <ImageStyled src={poster ? `https://image.tmdb.org/t/p/w300/${poster}` : 'No poster'} alt={title} />\n                <Title>{title}</Title>\n            </Link>\n        </ItemStyled>\n    )\n};\n\nMoviesListItem.propTypes = {\n  id: propTypes.number.isRequired,\n  poster: propTypes.string.isRequired,\n    title: propTypes.string.isRequired,\n};\n","import { MoviesListItem } from 'components/MoviesListItem/MoviesListItem';\nimport propTypes from 'prop-types';\nimport { ImageGalleryList } from 'components/ImageGallery/ImageGallery.styled';\n\n\nexport function MoviesList({movies}) {\n    return (\n        <ImageGalleryList>\n            {movies.map(event => {\n                return (\n                    <MoviesListItem\n                        key={event.id}\n                        id={event.id}\n                        poster={event.poster_path}\n                        title={event.original_title}\n                        // vote={vote_average}\n                    />\n                )\n            }          \n            )}\n        </ImageGalleryList>\n)\n};\nMoviesList.propTypes = {\n    trendingFilms: propTypes.arrayOf(\n        propTypes.exact({\n            id: propTypes.number.isRequired,    \n            poster_path: propTypes.string.isRequired,\n            original_title: propTypes.string.isRequired,   \n            vote_average: propTypes.number.isRequired,     \n        })),          \n};","import { useState, useEffect } from 'react';\nimport * as eventsApi from 'services/api';\nimport { Loader } from 'components/Loader/Loader';\nimport { MoviesList } from 'components/MoviesList/MoviesList';\n\nexport default function HomePage() {\n  const [trendingFilms, setTrendingFilms] = useState(null);\n\n  useEffect(() => {\n    eventsApi.fetchTrending().then(trendingFilms => {\n      const mappedTrendingFilms = eventsApi.mapper(trendingFilms.results);\n      setTrendingFilms(mappedTrendingFilms);\n    });\n  }, []);\n\n  return (\n    <>\n      <h1>Trending today</h1>\n      {!trendingFilms && <Loader />}\n      {trendingFilms && <MoviesList movies={trendingFilms} />}\n    </>\n  );\n}\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = '0695a445b15baac58108e1a8456d49ee';\n\nexport const mapper = data => {\n    return data.map(\n        ({ id, poster_path, original_title, vote_average }) => ({\n            id,\n            poster_path,\n            original_title,\n            vote_average\n        }));\n};\n\nexport async function fetchTrending() {\n    const response = await axios.get(`/trending/movie/day?api_key=${API_KEY}&page=${1}`);\n    return response.data; \n};\n\nexport async function fetchSearch(searchQuery) {\n    const response = await axios.get(`/search/movie?api_key=${API_KEY}&query=${searchQuery}&page=1`);\n    return response.data; \n    \n};\n\nexport async function fetchDetails(movieId) {\nconst response = await axios.get(`/movie/${movieId}?api_key=${API_KEY}&append_to_response=videos,images`);\n    return response.data; \n};\n\nexport async function fetchCast(movieId) {\nconst response = await axios.get(`/movie/${movieId}/credits?api_key=${API_KEY}`);\n    return response.data;  \n};\n\nexport async function fetchReviews(movieId) {\nconst response = await axios.get(`/movie/${movieId}/reviews?api_key=${API_KEY}`);\n    return response.data; \n};\n\n// export async function fetchTrending() {\n//     const trendingURL = `${BASE_URL}/trending/movie/day?api_key=${API_KEY}&page=${1}`;\n//     return await axios.get(`${trendingURL}`).then(response => response.data);   \n// };\n\n// export async function fetchSearch(searchQuery) {\n//     const serchURL = `${BASE_URL}/search/movie?api_key=${API_KEY}&query=${searchQuery}&page=1`;\n//     return await axios.get(`${serchURL}`).then(response => response.data);   \n// };\n\n// export async function fetchDetails(movieId) {\n//     const detailsURL = `${BASE_URL}/movie/${movieId}?api_key=${API_KEY}&append_to_response=videos,images`;\n//     return await axios.get(`${detailsURL}`).then(response => response.data);  \n// };\n\n// export async function fetchCast(movieId) {\n//     const castURL = `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}`;\n//     return await axios.get(`${castURL}`).then(response => response.data);  \n// };\n\n// export async function fetchReviews(movieId) {\n//     const reviewsURL = `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}`;\n//     return await axios.get(`${reviewsURL}`).then(response => response.data);  \n// };"],"names":["ImageGalleryList","styled","LoaderBlock","Loader","width","height","color","ItemStyled","ImageStyled","Title","MoviesListItem","id","poster","title","location","useLocation","to","state","from","pathname","search","src","alt","MoviesList","movies","map","event","poster_path","original_title","HomePage","useState","trendingFilms","setTrendingFilms","useEffect","eventsApi","then","mappedTrendingFilms","results","axios","API_KEY","mapper","data","vote_average","fetchTrending","response","fetchSearch","searchQuery","fetchDetails","movieId","fetchCast","fetchReviews"],"sourceRoot":""}